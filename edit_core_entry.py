'''
This hack is to replace friendly names and node name for zwave
devices in Home Assistant.  It hopefully addresses the basic problem of
renaming all nodes associated with a zwave device- in a very hacky way.

IT COULD BREAK YOUR Home Assistant Install.  Your responsibility.
If you don't understand the problem this is solving, stop here.

Requires python3

At a high level- here is the logic to follow to use this:
-backup core.entity_registry
-find the zwave node number of the node you want to rename_node
-edit this file in the 'CHANGE ME' section below to indicate the node number
  and the entity name (no spaces) and new (friendly) name
-run this code from the .storage location in homeassistant
  eg: `python3 edit_core_entry.py`
-lots of crap will spew to the screen.  you will see 'Old Entry' and 'New Entry'
  and can compare what has changed
-it will create a new file- core.entity_registry.new
-check the .new file over
-stop HASS
-replace core.entity_registry with core.entity_registry.new
-start HASS
-cross fingers
'''

import json
import logging
import argparse

'''
CHANGE ME
'''
rename_node="12"
new_entity_name="entry_garage_hall_motion"
new_name="Entry Garage Hall Motion"

with open("core.entity_registry", "r") as read_file:
  data = json.load(read_file)
  #print(data)
entities=data['data']['entities']

logger = logging.getLogger()
handler = logging.StreamHandler()
formatter = logging.Formatter(
        '%(asctime)s %(levelname)-8s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)



with open("core.entity_registry.new", "w") as write_file:
    json.dump(data, write_file)



# credit https://www.geeksforgeeks.org/longest-common-substring-array-strings/
def findstem(arr):

    # Determine size of the array
    n = len(arr)

    # Take first word from array
    # as reference
    s = arr[0]
    l = len(s)

    res = ""

    for i in range( l) :
        for j in range( i + 1, l + 1) :

            # generating all possible substrings
            # of our reference string arr[0] i.e s
            stem = s[i:j]
            k = 1
            for k in range(1, n):

                # Check if the generated stem is
                # common to all words
                if stem not in arr[k]:
                    break

            # If current substring is present in
            # all strings and its length is greater
            # than current result
            if (k + 1 == n and len(res) < len(stem)):
                res = stem

    return res


'''
we will run through the entities once to find common substrings
for the entity_ids that are automatically generated by hass
This is needed cause hass today doesnt have delimeter that is distinct
for the device type.  For example consider:
    vision_security_zp3111_multisensor_4in1_alarm_level
    and
    vision_security_zp3111_multisensor_4in1_sensor

you can't split('_')[-1] cause you only get 'level' not 'alarm_level'
'''
learninglist=[]
for entity in entities:
    # this code depends on the unique id being prefixed
    # by the zwave node id + a '-'  character
    # I also create a new entry- "oldentity_id"- hoping hass will ignore it
    if entity['unique_id'].startswith(rename_node + '-'):
        oldentity=entity['entity_id'].split('.')

        learninglist.append(oldentity[1])
stem = findstem(learninglist)
logger.debug("Common string: " + stem)

'''
now we go through again and rename and edited
'''
for entity in data['data']['entities']:
    if entity['unique_id'].startswith(rename_node + '-'):
        oldentity=entity['entity_id'].split('.')
        # here we use the stem from above to extract only the device type
        logger.debug("Old Entity: %s", entity)
        device_type=entity['entity_id'].split(stem)[1]
        #print(device_type)
        entity['oldentity_id']=entity['entity_id']
        entity['entity_id']=oldentity[0] +  "." + new_entity_name + "_" +device_type
        entity['name']=new_name + " " + device_type.replace('_',' ')
        #print(entity['unique_id'],entity['entity_id'])
        #print(entity)
        logger.debug("New entity: %s" ,entity)


with open("core.entity_registry.new", "w") as write_file:
    logger.debug("Writing file out")
    json.dump(data, write_file,ensure_ascii=False, indent=4)
